/**
 * @file  dhotelsearch_dates-[version].js
 * @brief トラベル国内宿泊 宿泊日プルダウン制御
 * @version $Id$
 */
// 名前空間の取得
if(typeof YAHOO=="undefined"||!YAHOO){var YAHOO={}}
if(typeof YAHOO.JP=="undefined"||!YAHOO.JP){YAHOO.JP={}};
if(typeof YAHOO.JP.travel=="undefined"||!YAHOO.JP.travel){YAHOO.JP.travel={}};
if(typeof YAHOO.JP.travel.dhotel=="undefined"||!YAHOO.JP.travel.dhotel){YAHOO.JP.travel.dhotel={}};
if(typeof YAHOO.JP.travel.dhotel.dhoteldate=="undefined"||!YAHOO.JP.travel.dhotel.dhoteldate){YAHOO.JP.travel.dhotel.dhoteldate={}};
if(typeof YAHOO.JP.travel.dhotel.today=="undefined"||!YAHOO.JP.travel.dhotel.today){YAHOO.JP.travel.dhotel.today={}};
// オブジェクトのグローバル化
window.YAHOO.JP.travel.dhotel = YAHOO.JP.travel.dhotel;


//グローバル変数
//*** 2006/10/19 Add (T01) 26時対応 [Start]
YAHOO.JP.travel.dhotel.today = new Date("February,21 2019");
YAHOO.JP.travel.dhotel.dhoteldate = new Date("February,20 2019");
//*** 2006/10/19 Add (T01) [End]

 /**
 * @brief DhotelsearchDates トラベル国内宿泊 宿泊日プルダウン制御
 * @param[in] form_id
 */
var DhotelsearchDates = function (form_id) {
    // IDを指定のない場合は終了
    if (!form_id) return;

    /**
     * 初期化
     */ 
    var elm = document.getElementById(form_id)

        // 初期値設定
        ,dd = YAHOO.JP.travel.dhotel.dhoteldate
        ,enddd
        ,y = 2004           //デフォルト年
        ,m = 1              //デフォルト月
        ,d = 1              //デフォルト日
        ,in_y = 0           //チェックイン年
        ,in_m = 0           //チェックイン月
        ,in_d = 0           //チェックイン日
    
        ,next_date = 0
        ,next_day = 0
        ,next_day_month = 0
        
        ,enddaycnt = 185
        ,max_haku = 6
        ,param_nen = ""
        ,param_tuki = ""
        ,param_hi = "";

    // URLから 月日を取得、設定
    getdefaultdate();

    // イベント付与
    $(elm.nen).on('change', changeInYear);
    $(elm.tuki).on('change', changeInMon);
    $(elm.hi).on('change', changeInDay);

    // ※ グローバルに必要な関数を出しておく
    window.checkStay = checkStay;
    
    /**
     * @brief ロード時に呼び出される関数
     * @param[in] nen
     * @param[in] tuki
     * @param[in] hi
     */
    function getdefaultdate() {
        
        //グローバル変数に保存しておく
        param_nen = null;
        param_tuki = null;
        param_hi = null;
        
        enddd = addDay(dd, enddaycnt);  //1日後
        y = dd.getFullYear();
        m  = dd.getMonth() + 1;
        d = dd.getDate();
        nokoriDay = 0;
        if (YAHOO.JP.travel.dhotel.dhoteldate.getTime() != YAHOO.JP.travel.dhotel.today.getTime()) {
            next_date = addDay(dd, 0);
        } else {
            next_date = addDay(dd, 1);
        }
        next_day = next_date.getDate();
        next_day_month = next_date.getMonth()+1;
        next_month_year = next_date.getYear()+1;

        //選択された値を取得
        var selected_nen = 
            parseInt(elm.nen.options[elm.nen.selectedIndex].value);
        //selected_tuki = 
        //    parseInt(elm.tuki.options[elm.tuki.selectedIndex].value),
        //selected_hi =
        //    parseInt(elm.hi.options[elm.hi.selectedIndex].value);
        
        //185日後が年またぎの場合は、w_noの値を調整
        if (enddd.getMonth() < dd.getMonth()) {
            w_no = 12 - dd.getMonth();
            //年またぎの場合は2年分表示
            elm.nen.options.length = 2;
        } else {
            //tukiは現在の月から半年後の月まで表示
            w_no = enddd.getMonth() - dd.getMonth();
            //年をまたがない場合は1年分表示
            elm.nen.options.length = 1;
        }

        //年のselectボックスを作成
        for (i=0; i<=elm.nen.options.length-1; i++) {
            elm.nen.options[i] = new Option(y+i, y+i);
        }
        
        //月のselectボックスを作成
        elm.tuki.options.length = w_no + 1;
        for (i=0; i<=w_no; i++) {
            //年をまたがない場合
            if ((selected_nen == YAHOO.JP.travel.dhotel.dhoteldate.getFullYear())
                && (m+i <= 12)) {
                elm.tuki.options[i] = new Option((m+i), m+i);
            //年をまたぐ場合
            } else if (selected_nen > YAHOO.JP.travel.dhotel.dhoteldate.getFullYear()) {
                elm.tuki.options[i] = new Option((m+i-12), m+i-12);
            }
        }
        if (param_tuki != null) {
            for(i=0; i<elm.tuki.length; i++) {
                if (elm.tuki.options[i].value == param_tuki) {
                    elm.tuki.options[i].selected = true;
                    param_tuki = null;
                    break;
                }
            }
        } else {
            for(i=0; i<elm.tuki.length; i++) {
                if (elm.tuki.options[i].value == next_day_month+'') {
                    elm.tuki.options[i].selected = true;
                    break;
                }
            }
        }
        
        changeInYear();
    }
    
    /**
     * @brief 日を加える関数
     * @param[in] oldDate
     * @param[in] num
     */
    function addDay(oldDate, num){ //引数oldDayは加える前の日、引数numは○日後
        var newDate = new Date(oldDate);
        newDate.setDate(oldDate.getDate()+num); //xDayの日時を今日からnum日加えたものに変更
        return newDate;
    }
    
    /**
     * @brief 月を加える関数
     * @param[in] oldDate
     * @param[in] num
     */    
    function addMon(oldDate, num){ //引数oldDayは加える前の日、引数numは○月後
        var newDate = new Date(oldDate);
        newDate.setDate(oldDate.getMonth()+num);
        return newDate;
    }
    
    /**
     * @brief 年を加える関数
     * @param[in] oldDate
     * @param[in] num
     */
    function addYear(oldDate, num){ //引数oldDayは加える前の日、引数numは○年後
        var newDate = new Date(oldDate);
        newDate.setDate(oldDate.getYear()+num);
        return newDate;
    }
    
    /**
     * @brief 日を変更した時に呼ばれるメソッド
     */
    function changeInDay() {
        //選択されたindexと値を取得
        var idx = elm.hi.selectedIndex;
        var val = parseInt(elm.hi.options[elm.hi.selectedIndex].value);
        //チェックイン日を保存
        in_d = val;
        //if (in_m==0 || in_d==0) { //チェックイン月or日に「指定なし」が選択された場合
        //チェックイン日のDateを作成
        in_date = new Date(in_y, in_m-1, in_d);
        //チェックアウトの月日欄を作成
        out_dates = new Array();
        for (i=0; i<7; i++) {
            
            //*** 2006/10/19 Add (T01) 26時対応 [Start]
            out_dates[i] = new Date("February,20 2019");
            //*** 2006/10/19 Add (T01) [End]
            
            out_dates[i] = addDay(in_date, i+1);
        }
        var beginMon = parseInt(out_dates[0].getMonth()) + 1; //チェックアウトの初日月
        var endMon   = parseInt(out_dates[3].getMonth()) + 1; //チェックアウトの最終日月
        
        //当月(beginMon)の残り日数を取得
        for (nokoriDay=0; nokoriDay<7; nokoriDay++) {
            if (beginMon!=out_dates[nokoriDay].getMonth()+1) {
                break;
            }
        }
        
        //}
        checkStay();
    }
    
    /**
     * @brief チェックイン月欄を変更した時に呼び出される関数
     */
    function changeInMon() {    //チェックイン月をチェンジした場合
        var feb = 28; //2月の日数
        var startday = 1;
        var endday = 31;
        idx = elm.tuki.selectedIndex;
        val = parseInt(elm.tuki.options[elm.tuki.selectedIndex].value);
        elm.hi.options.length = 1;
        
        //チェックイン月を保存
        in_m = val;
        
        //閏年の判定
        if (isUrudoshi(in_y)) {
            feb = 29;
        } else {
            feb = 28;
        }
        
        var w_counter = 0;
        var w_day;
        
        if ( val==m ){
            startday = d;
            if(val==2) {
                
                if ( ( d + enddaycnt ) <= feb){
                    endday = d + enddaycnt;
                }else{
                    endday = feb;
                }
                
            }else if (val==4 | val==6 | val==9 | val==11) {
                if (d + enddaycnt <= 30){
                    endday = d + enddaycnt;
                }else{
                    endday = 30;
                }
            } else {
                if (d + enddaycnt <= 31){
                    endday = d + enddaycnt;
                }else{
                    endday = 31;
                }
            }
        }else{
            startday = 1;
            
            for( var i=1; i<=enddaycnt; i++ ){
                w_day = addDay(dd, i);
                if( val == ( w_day.getMonth() + 1 ) ) w_counter++;
            }
            endday = w_counter;
            
        }
        
        elm.hi.options.length = endday - startday + 1;
        for (i=0; i<elm.hi.options.length; i++) {
            elm.hi.options[i] = new Option((startday+i), startday+i);
        }
        
        if (param_hi != null) {
            for ( i=0; i<=elm.hi.options.length-1; i++){
                if ( elm.hi.options[i].value == param_hi ){
                    elm.hi.options[i].selected = true;
                    param_hi = null;
                }
            }
        } else {
            //月を変更したら日欄はいったん「指定なし」に戻す
            if (val == next_day_month) {
                for (i=0; i<=elm.hi.options.length-1; i++) {
                    if (elm.hi.options[i].value == next_day) {
                        elm.hi.options[i].selected = true;
                    }
                }
            } else {
                elm.hi.options[0].selected = true;
            }
            
        }
        changeInDay();
    }
    
    /**
     * @brief チェックイン年欄を変更した時に呼び出される関数
     */
    function changeInYear() {    //チェックイン年をチェンジした場合
        var startmon = 1;
        var endmon = 12;
        idx = elm.nen.selectedIndex;
        val = parseInt(elm.nen.options[elm.nen.selectedIndex].value);
        elm.tuki.options.length = 1;

        //チェックイン年を保存
        in_y = val;

        var w_mon;

        if (val == y) {
            startmon = m;
            //185日後が年またぎの場合は、w_monの値を調整
            if (enddd.getMonth() < dd.getMonth()) {
                w_mon = 12 - dd.getMonth() - 1;
            } else {
                //tukiは現在の月から半年後の月まで表示
                w_mon = enddd.getMonth() - dd.getMonth();
                endmon = m + w_mon;
            }
        } else {
            startmon = 1;
            endmon = enddd.getMonth() + 1;
        }
 
        elm.tuki.options.length = endmon - startmon + 1;
        for (i=0; i<elm.tuki.options.length; i++) {
            elm.tuki.options[i] = new Option((startmon+i), startmon+i);
        }
 
        if (param_tuki != null) {
            for ( i=0; i<=elm.tuki.options.length-1; i++){
                if ( elm.tuki.options[i].value == param_tuki ){
                    elm.tuki.options[i].selected = true;
                    param_tuki = null;
                }
            }
        } else {
            //年を変更したら月欄はいったん「指定なし」に戻す
            if (val == next_month_year){
                for (i=0; i<=elm.tuki.options.length-1; i++) {
                    if (elm.tuki.options[i].value == next_day_month) {
                        elm.tuki.options[i].selected = true;
                    }
                }
            } else {
                elm.tuki.options[0].selected = true;
            }

        }
        changeInMon();
    }
    
    /**
     * @brief 年月・日が変更された場合に泊数が何日まで指定できるか制御する関数
     */
    function checkStay(){
        
        //本日から、92日後の日付を取得
        
        //*** 2006/10/19 Add (T01) 26時対応 [Start]
        var nowdate = new Date("February,20 2019");
        //*** 2006/10/19 Add (T01) [End]
        
        var maxdate = addDay(nowdate, enddaycnt); 
        
        //現在指定されている年月・日を取得
        var in_date = new Date(in_y, in_m-1, in_d);
        
        //現在選択されている泊数を取得
        var idx = elm.haku.selectedIndex;
        
        //最大泊数は7日なので、指定宿泊日より7日の間に92日目があるか
        for(i=0; i<max_haku; i++){
            var tmpdate = addDay(in_date, i);
            if(tmpdate.toString() == maxdate.toString()){
                elm.haku.options.length = i + 1;
                break;
            }else{
                elm.haku.options.length = max_haku;
            }
        }
        
        var len = elm.haku.options.length;
        for(j=0; j<len; j++){
            elm.haku.options[j] = new Option(j+1, j+1); 
        }
        
        //選択済みの泊数が復元できれば復元する
        if(idx != -1 && len > idx && len > 1){
            elm.haku.options[idx].selected = true;
        }
    }
    
    
    
    /**
     * @brief 閏年の判定用
     */
    function isUrudoshi(nen) {
        if (nen%4 == 0) {
            if (nen%100 == 0) {
                if (nen%400 == 0) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return true;
            }
        } else {
            return false;
        }
    }
}
