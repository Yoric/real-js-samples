;(function (root, factory) {
	'use strict';
	if (typeof define === 'function' && define.amd) {   // jshint ignore:line
		// AMD
		define([                                            // jshint ignore:line
			'jquery',
			'handlebars'
		], factory);
	} else {
		// Browser globals
		root.skp11 = root.skp11 || {};
		root.skp11.product = root.skp11.product || {};
		root.skp11.product.CustomOption = factory(
			root.jQuery,
			root.Handlebars
		);
	}
}(this, function ($, Handlebars) {
	'use strict';
	var CustomOption;

    var optVar = productOptInfo;
    var prcVar = productPrcInfo;

	var SelOptRecord = function(data) {
		this.optNm = data.optNm;
		this.optItemNo = data.optItemNo;
		this.optValueNo = data.optValueNo;
		this.addPrc = data.addPrc;
		this.stckQty = data.stckQty;
		this.selOptIdx = data.selOptIdx;
	};

	var EntOptRecord = function(data) {
		this.optNm = data.optNm;
		this.optNo = data.optNo;
		this.optTxt = data.optTxt;
	};

	var CalcOptRecord = function(data) {
		this.optionSize = data.optionSize;
		this.addPrc = data.addPrc;
		this.optX = data.optX;
		this.optY = data.optY;
	};

	CustomOption = function (optionId, position) {
		// 사용되는 객체
		this.$button = $(optionId);
		this.position = position;
		this.$content = $(this.$button.attr('href'));
		this.$optionBox = $('.prdc_ezop_wrap > .option_listbox > .ui_option_box > .option_box');
		this.$templateButton = this.$content.find('.ui_option');
		this.$input = this.$content.find('ul.op_write > li > input.text');
		this.$op_button = this.$content.find('.op_bottom');
		this.$calenderCallButton = this.$content.find('.day_btn');
		this.$calenderContent = this.$content.find('.lay_nw_cal');
		this.$win = $(window);

		// 템플릿 컴파일
		this.source1 = $('#optionTopTemplate').html();
		this.topHandlebars = Handlebars.compile(this.source1);
		this.source2 = $('#optionBottomTemplate').html();
		this.bottomHandlebars = Handlebars.compile(this.source2);

		// 템플릿 적용 컨텐츠
		this.$templateContent = this.$content.find('.ui_option_list');

		this.$estimate = $('.estimate_wrap.position_'+position);
		// 디폴트 값
		this.index = 0;
		this.isSoldOutFlag = false;
		this.isOptSearchFlag = false;

		this.paramData = {};

		this.selOptArr = [];
		this.entOptArr = [];
		this.calcOptObj = {};

		this.calenderArr = [];

        this.selectedYear;
        this.selectedMonth;

		this.timer;
	};

	CustomOption.prototype.init = function () {
		var _this = this;

		_this.bind();

		_this.afterBind();

        if("top" == _this.position){

            //무옵션 상품일때 처리
            if(optVar.isNotOptPrd){
                _this.initNonOptOrderInfo();
            }

            //날짜형 옵션인 경우 달력 셋팅
            if("01" == optVar.optTypCd){
                _this.selectedYear = new Date().getFullYear();
                _this.selectedMonth = new Date().getMonth() + 1;
                _this.setCalenderData();
            }

            _this.setCtlgMatchInfo();
        }else if("bottom" == _this.position){
            //선택형 옵션이 있을경우 밑에 옵션창 열어줌
            if(optVar.selOptCnt > 0){
                _this.$win.trigger('bottomOptionToggle', true);
            }
        }
	};

	// 옵션 레이어 호출
	CustomOption.prototype.viewOption = function (isOpen, isFocus) {
		var _this = this;
		isFocus = false;
		if (isOpen) {
			if (_this.position === 'top') {
				_this.$content.css({'position': 'absolute', 'top': _this.$button.position().top, 'left': 0});
			} else if (_this.position === 'bottom') {
				_this.$optionBox.hide();
			}
			_this.$content.show();
			if (isFocus) {
				_this.$content.find('a:eq(0)').focus();
			}
		} else {
			if (_this.position === 'bottom') {
				_this.$optionBox.show();
			}

			_this.$content.hide();
			if (isFocus) {
				_this.$button.focus();
			}
		}
		_this.$content.find('a:eq(0)').blur();
		// _this.$content.find('a:eq(0)').not('.size_btn, .day_btn').focus();
		_this.zIndex(_this.$content, isOpen);
	};

	CustomOption.prototype.zIndex = function ($el, isOpen) {
		if (isOpen) {
			// 레이어가 보일때 부모요소들의 zIndex를 같이 올려줌
			$el.parentsUntil('body').filter(function () {
				return $(this).css('position') === 'relative';
			}).addClass('zindex');
		} else {
			// 레이어가 닫힐때 부모요소들의 zIndex를 원래대로 돌림
			$el.parentsUntil('body').filter(function () {
				return $(this).css('position') === 'relative';
			}).removeClass('zindex');
		}
	};

    CustomOption.prototype.changeOptionViewMode = function (paramData) {
        var _this = this;
        if("soldOut" == paramData.searchType){
            _this.soldOut(_this.$templateContent.eq(paramData.index));

			if(_this.isSoldOutFlag){
				$("span.op_desc_txt").show();
				_this.timer = setTimeout(function () {
					$("span.op_desc_txt").hide();
				}, 3000);
			}else{
				$("span.op_desc_txt").hide();
				clearTimeout(_this.timer);
			}
        }else if("optSearch" == paramData.searchType){

        }

    };

	// 상단과 하단의 옵션을 초기화 시킨다
	CustomOption.prototype.resetOption = function (index) {
		
		if("01" == optVar.selOptTyp){
			var _this = this;
			
			// 하위 옵션 초기화
			// _this.$input.val('');
			_this.$templateContent.filter(':gt(' + index + ')').html('');
			// _this.$templateSubContent.filter(':gt(' + index + ')').data('value', false).html('');
			_this.$templateButton.filter(':gt(' + index + ')').find('span.opt_input').html('');
		}
	};

	CustomOption.prototype.trim = function(txt) {
		return txt.replace(/(^\s*)|(\s*$)/gi, "");
	};

	// 옵션입력박스에 입력이 완료되었는지 확인
	CustomOption.prototype.checkInput = function(isAlert) {
		var _this = this;

		_this.isInput = true;

		_this.entOptArr = [];
		$.each(_this.$input, function (index, el) {
			var txt = _this.trim($(el).val());
			if (txt === '') {
				_this.isInput = false;
			} else {
				_this.setEntOptRecord($(el));
			}
		});

		if(!_this.isInput && isAlert){
			_this.entOptArr = [];
			alert('입력형 옵션이 입력되지 않았습니다. 입력형 옵션을 입력 후 선택하세요.');
		}
	};
    // 옵션입력박스에 입력이 완료되었는지 확인
    CustomOption.prototype.checkInputEmpty = function () {
        var _this = this;

        var txt = "";
        $.each(_this.$input, function (index, el) {
            txt = txt + _this.trim($(el).val());
        });
        if(txt.length > 0){
            return true;
        }else{
            return false;
        }
    };

	// 상단과 하단의 옵션을 동기화 시킨다
	CustomOption.prototype.setTemplate = function (data) {
		var _this = this,
			index = parseInt(data.target, 10) - 1;

		if (data.target > 0) {
			_this.resetOption(index);
		}

		// 요청된 상단 혹은 하단의 컨텐츠에 템플릿을 적용시킴가 동시에 서브컨텐츠에 템플릿을 동기화한다.
		if (_this.position === 'top') {
			_this.$templateContent.eq(data.target)
				.html(_this.topHandlebars(data))
				.show()
					.siblings('.ui_option_list')
						.hide();
			// _this.$templateSubContent.eq(data.target).html(_this.bottomHandlebars(data));
		} else {
			_this.$templateContent.eq(data.target)
				.html(_this.bottomHandlebars(data))
				.show()
					.siblings('.ui_option_list')
						.hide();
			// _this.$templateSubContent.eq(data.target).html(_this.topHandlebars(data));
		}
        _this.soldOut(_this.$templateContent.eq(data.target));
	};

	CustomOption.prototype.optionToggle = function (index, isForceView) {
		var _this = this,
			toggle;

		if (isForceView) {
			toggle = true;
		} else {
			toggle = _this.$templateContent.eq(index).is(':visible');
		}

		_this.$templateButton
			.removeClass('active')
				.eq(index)
					.toggleClass('active', toggle);
	};

	CustomOption.prototype.setDefaultOptLayer = function(){
        var _this = this;

        _this.$templateButton.find('span.opt_input').html('');
        _this.selOptArr = [];

        _this.$templateContent.hide();

        if(optVar.entOptCnt == 0){
            _this.$templateContent.eq(0).show();
            _this.optionToggle(_this.index, true);
        }else{
			_this.$templateContent.hide();
			_this.optionToggle(_this.index, false);
			_this.$input.val('');
			_this.oldIETrigger();
		}
        $("input.ui_option_search").each(function(){
			$(this).attr('checked', false);
			_this.isOptSearchFlag = false;
			$(this).parent().find('div.text_wrap').toggle(_this.isOptSearchFlag);
			_this.optSearch(_this.$templateContent.eq(0), "");
        });

        $("input.ui_option_soldout").each(function(){
            $(this).attr('checked', false);
            _this.isSoldOutFlag = false;
        });

		if(optVar.isOptCalc){
			// $("[name=calcOptX]").val(calcOptInfo[0].optItemMinValue);
			// $("[name=calcOptY]").val(calcOptInfo[1].optItemMinValue);
			// $("[name=calcOptAddPrc]").val();
		}

		_this.$content.find('input[name=txtSearchOptNm]').val("");
        _this.$calenderContent.hide();
    };

	CustomOption.prototype.oldIETrigger = function () {
		var _this = this;
		if ((navigator.appVersion.indexOf("MSIE 7.") > 0) || (navigator.appVersion.indexOf("MSIE 8.") > 0) || (navigator.appVersion.indexOf("MSIE 9.") > 0)) {
			$.each(_this.$input, function () {
				$(this)[0].fireEvent('onblur');
			});
		}
	};

	// 이벤트 바인드
	CustomOption.prototype.bind = function () {
		var _this = this,
			text;

		// 옵션 버튼
		_this.$button.on('click', function (e) {
			e.preventDefault();

			_this.index = 0;
			_this.$win.trigger('optionLayerClose');   // 다른 레이어 닫기
			_this.resetOption(0);
			_this.viewOption(true, true);

			_this.setDefaultOptLayer();
			_this.$win.trigger("callGaEvent","0;"+ (_this.position == "top" ? "12" : "20") +";옵션 선택");
			return false;
		});

		// 다른 옵션 레이어가 뜰경우 옵션 레이어를 닫아준다.
		_this.$win.on('optionLayerClose', function () {
			$(document).trigger('infoContentClose');
			_this.viewOption(false, false);
			return false;
		});

		// 각 옵션의 보기 버튼 클릭시
		_this.$templateButton.on('click', 'a', function (e) {
			e.preventDefault();
			var isValue, index = _this.$templateButton.index($(this).parent());

			_this.checkInput(true);
			if (_this.isInput) {
				if (index === 0) {
					_this.index = index;
					_this.$templateContent.eq(_this.index)
						.toggle()
						.siblings('.ui_option_list')
						.hide();
					_this.optionToggle(0, false);
				} else {
					// 옵션에 데이터가 없으면 열리지 않게 한다.
					isValue = _this.$templateContent.eq(index).find("ul").find("li").length;
					if (isValue > 0) {
						_this.index = index;
						_this.openNextOption(index);
					}
				}
				_this.$content.find('input[name=txtSearchOptNm]').val("");
				_this.optSearch(_this.$templateContent.eq(_this.index), "");

			} else {
				return false;
			}
			return false;
		});

		// 옵션 내의 상품 리스트를 클릭시
		_this.$templateContent.on('click', 'a', function (e) {
			e.preventDefault();
			var $this = $(this),
				isEnd = $this.hasClass('end'),
				paramData = {};

			_this.checkInput(true);
			if (!_this.isInput) {
				return false;
			}

			if (isEnd) {
				// alert('품절입니다.');
				return false;
			} else {
				if(_this.chkDuplicateSelOption($this.data("optno"))) {
					return false;
				}

				_this.$content.find('input[name=txtSearchOptNm]').val("");

				var objData = _this.extractData($this);
				_this.index = objData.seloptidx - 1;

				// 상단과 하단의 옵션을 동기화 시킨다
				_this.$templateButton.eq(_this.index).find('span.opt_input').html(objData.dtloptnm);

				//선택 옵션 정보 저장
				_this.setSelOptRecord($this);
				var isLast = _this.getIsLastOptSelected();

				//마지막 옵션 선택으로 인한 주문옵션에 추가
				if (isLast){
					if(optVar.isOptCalc){

						_this.openNextOption(_this.index);

					}else{
						// 마지막 옵션을 선택한 경우 상품을 추가한다.
						_this.chkOptStock();
					}
				} else {
					paramData.optNo = objData.optno;
					paramData.selOptIdx = Number(objData.seloptidx);

					$.each( _this.$templateContent.eq(_this.index).find("ul").find("li"), function( key, value ) {
						_this.chgSearchText($(value), "", true);
					});

					_this.getNextOptList(paramData);
				}
			}
			return false;
		});
		$('input[name="txtSearchOptNm"]').bind("mouseup", function() {

			var $input = $(this),
				oldValue = $input.val();

			if (oldValue == "") return;

			setTimeout(function(){
				var newValue = $input.val();
				if (newValue == ""){
					_this.optSearch(_this.$templateContent.eq(_this.index), newValue);
				}
			}, 1);

		});

		// 옵션 업데이트
		_this.$content.on('optionUpdate', function (e, data) {
			_this.setTemplate(data);
			// return false;
		}).on('click', 'a.close_btn', function (e) {
			e.preventDefault();
            if(optVar.entOptCnt > 0 && _this.checkInputEmpty()){
                if(confirm("입력된 정보가 삭제됩니다. 삭제하시겠습니까?")){
                    _this.$input.val('');
                    _this.$win.trigger('optionLayerClose');
                }else{
                    return false;
                }
            }
            if(_this.isSoldOutFlag) {
            	_this.isSoldOutFlag = false;
            	_this.soldOut(_this.$templateContent.eq(0));
            }
			_this.viewOption(false, true);
			// return false;
        }).on('click', 'a.size_btn', function () {
            var url = "http://globalshopping.11st.co.kr/globalSizeChartPopup.page";
            window.open(url, "_popup", "width=658,height=648,scrollbars=no,status=no,location=no");
			_this.$win.trigger("callGaEvent","0;13;사이즈조견표");
		}).on('change keyup', 'input', function (e) {
			var $this = $(this)
				,paramData = {};

			if (e.type === 'change' && $this.hasClass('ui_option_search')) {
				_this.isOptSearchFlag = $(this).prop('checked');

                if(_this.isOptSearchFlag){

                    if(optVar.entOptCnt > 0) {
                        _this.checkInput(true);
                        if(!_this.isInput){
                            $(this).attr('checked', false);
                            _this.isOptSearchFlag = false;
                            $(this).parent().find('div.text_wrap').toggle(_this.isOptSearchFlag);
                            return;
                        }
                    }
					_this.$win.trigger("callGaEvent","0;13;옵션검색");
                }else{
                    _this.$content.find("[name=txtSearchOptNm]").val("");
                    $(".rs_not").hide();
                }

				if(!_this.$templateContent.eq(_this.index).is(':visible')){
					_this.$templateButton.eq(_this.index).find("a").trigger("click");
				}

                $(this).parent().find('div.text_wrap').toggle(_this.isOptSearchFlag);
                _this.optSearch(_this.$templateContent.eq(_this.index), _this.$content.find("[name=txtSearchOptNm]").val());


			} else if (e.type === 'change' && $this.hasClass('ui_option_soldout')) {
                _this.isSoldOutFlag = $this.prop('checked');
                if(_this.isSoldOutFlag){
                    _this.checkInput(true);
                    if (!_this.isInput) {
                        _this.isSoldOutFlag = false;
                        $(this).attr('checked', false);
						return false;
                    }
					_this.$win.trigger("callGaEvent","0;13;품절제외");
                }
                paramData.searchType = "soldOut";
                paramData.index = _this.index;
                _this.changeOptionViewMode(paramData);
            } else if (e.type === 'keyup' && $this.hasClass('text') && "txtSearchOptNm" == $this.attr("name")) {

				_this.optSearch(_this.$templateContent.eq(_this.index), _this.$content.find("[name=txtSearchOptNm]").val());
			} else if (e.type === 'keyup' && $this.hasClass('text') && "txtEntOpt" == $this.attr("name")) {
				_this.checkInput(false);
				if(_this.isInput){
					if(13 === e.keyCode){
						if(!_this.$templateContent.eq(_this.index).is(':visible')){
							_this.$templateButton.eq(0).find("a").trigger("click");
						}
					}
				}
			}
		});

		_this.$estimate.on('keyup','input.size_value', function(){

			text = this.value.replace(/[^0-9]/g,'');
            if(text != this.value){
                alert("숫자만 입력할 수 있습니다.");
                this.value = text;
                return false;
            }

			_this.checkCalcOption(false);
		});

		_this.$estimate.on('click','button', function(){
			if(_this.checkCalcOption(true)){
				_this.setClacOptRecord();
				if(_this.chkDuplicateSelOption(_this.getCurrentOptMixNo(","))){
					return false;
				}
				_this.chkOptStock();
			}
		});

        _this.$op_button.on('click', 'button', function(){
            if("btnEntOptDone" == $(this).attr("name")){
                if(_this.chkDuplicateSelOption("nonSelOpt")){
                    return false;
                }
                _this.checkInput(true);
                if(_this.isInput){
                    var dataArr = [{
                        prdStckNo : optVar.totPrdStckNo
                        ,addPrc : 0
                        ,stckQty : optVar.totStockQty
                    }];
                    _this.addOrderOptArr(dataArr);
                }
            }else if("btnEntOptCancel" == $(this).attr("name")){
                if(!_this.checkInputEmpty()){
                    _this.$win.trigger('optionLayerClose');
                    return false;
                }
                if(confirm("입력된 정보가 삭제됩니다. 삭제하시겠습니까?")){
                    _this.$input.val('');
                    _this.$win.trigger('optionLayerClose');
                }
            }
            return false;
        });

		_this.$calenderCallButton.on('click', function(){
			_this.selectedYear = new Date().getFullYear();
			_this.selectedMonth = new Date().getMonth() + 1;
			_this.displayCalenderData();
			_this.$calenderContent.show();
			_this.$win.trigger("callGaEvent","0;13;날짜선택");
			return false;
		});

        _this.$calenderContent.on('click', 'button', function(){
            var $this = $(this);

            if($this.hasClass('btn_laycls')){
                _this.$calenderContent.hide();
            }
            return false;
        });

        _this.$calenderContent.on('click', 'a', function(){
            var $this = $(this);

            if($this.hasClass('prev')){
                _this.moveCalenderMonth("prev");
            }else if($this.hasClass('next')){
                _this.moveCalenderMonth("next");
            }else{
                var $td = $this.closest("td");
                if($td.hasClass("sale")){
                    var optObj = _this.extractData($this);

                    _this.$templateContent.find('ul > li > a[data-optno="'+optObj.optno+'"]').trigger('click');
                    _this.$calenderContent.hide();
                }
            }

            return false;
        });

        _this.$win.on('selectedSmartOption', function (e, data) {
        	if("bottom" == _this.position){
				_this.$win.trigger('bottomOptionToggle', true);

				if(undefined == _this.$input.val() || "" == _this.$input.val()){
					if(optVar.selOptCnt > 1 || optVar.isOptCalc){
						_this.$button.trigger('click');
					}
				}
				var optNo = data.optItemNo + ":" + data.optValueNo;
				_this.$templateContent.find('ul > li > a[data-optno="'+optNo+'"]').trigger('click');
			}
        });
	};
	
	CustomOption.prototype.getNextOptList = function(paramData){
		var _this = this;
		paramData.searchType = "nextOpt";

		if("02" == optVar.selOptTyp){
			_this.openNextOption(_this.index+1);
		}else{
			_this.getNextOptionData(paramData);
		}

	};
	
	CustomOption.prototype.openNextOption = function (index) {
		var _this = this;
		_this.index = index;
		_this.$templateContent.eq(_this.index)
		.toggle()
			.siblings('.ui_option_list')
			.hide();
		_this.optionToggle(_this.index, false);
	};
	
	CustomOption.prototype.getIsLastOptSelected = function(){
		var _this = this;
		var isLast = false;
		if("01" == optVar.selOptTyp){
			if (optVar.selOptCnt == _this.selOptArr.length && optVar.selOptCnt == _this.index +1){
				isLast = true;
			}
		}else if("02" == optVar.selOptTyp){
			if (optVar.selOptCnt == _this.selOptArr.length){
				isLast = true;
			}
		}
		return isLast;
	};
	
	CustomOption.prototype.getNextOptionData = function (paramData) {

		var _this = this;
		if("nextOpt" == paramData.searchType){
			
			var url = "/product/SellerProductDetailAjax.tmall"
				,optNoArr = paramData.optNo
				,optLvl = paramData.selOptIdx + 1
				,param = ""
				,callBack;

            // _this.index = paramData.seloptidx - 1;

			//마지막 추가
			if (optVar.selOptCnt == optLvl ) {

				param = "method=getProductDetailLastOptionList&prdNo="
					+ optVar.prdNo + "&optNoArr=" + optNoArr
					+ "&selOptCnt=" + optVar.selOptCnt
					+ "&isNewOption=" + true;
				
				callBack = function(returnVal){

					if (returnVal == "FAIL") {
						alert("서비스 장애가 있습니다. 고객센터로 연락 주세요.");
						return;
					}
					var jsonObj = eval(returnVal);
					jsonObj = _this.getTransOptionData(jsonObj, optLvl);
					_this.index = optLvl-1;
					var data = $.extend({"target": _this.index}, jsonObj);
					_this.setTemplate(data);
					_this.optionToggle(optLvl, false);

				};
				
			//중간 추가
			}else{
				param = "method=getProductDetailSubOptionList&prdNo="
					+ optVar.prdNo + "&optNoArr=" + optNoArr + "&optLvl="
					+ optLvl + "&selOptCnt=" + optVar.selOptCnt
					+ "&isNewOption=" + true;
				
				callBack = function(returnVal){

					if (returnVal == "FAIL") {
						alert("옵션을 불러오는 과정에서 일시적인 오류가 발생했습니다. 새로고침하신 후 이용해주세요.");
						return;
					}

					var jsonObj = eval(returnVal);
					jsonObj = _this.getTransOptionData(jsonObj, optLvl);
					_this.index = optLvl-1;
					var data = $.extend({"target": _this.index}, jsonObj);
					_this.setTemplate(data);
					// _this.optionToggle(optLvl, false);

				};
			}

			_this.paramData = paramData;

			$.ajax({
				url : url,
				data : param,
				success : callBack
			});
			
		}
	};
	
	CustomOption.prototype.extractData = function ($obj) {
		var dataList = [];
		
		$.each( $obj, function( key, value ) {
			dataList.push( $(value).data() );
		});

		if(dataList.length == 1) {
			return dataList[0];
		}else{
			return dataList;
		}
	};
	
	CustomOption.prototype.soldOut = function ($obj) {
	    var _this = this;
	    if(_this.isOptSearchFlag){
            _this.optSearch(_this.$templateContent.eq(_this.index), _this.$content.find("[name=txtSearchOptNm]").val());
        }else{
            if(this.isSoldOutFlag){
                var isShowNothing = true;
                $.each( $obj.find("ul").find("li"), function( key, value ) {
                    if(0 == $(value).find("a").data("stckqty")){
                        $(value).hide();
                    }else{
                        _this.chgSearchText($(value), "", true);
                        isShowNothing = false;
                    }
                });
                $("span.op_desc_txt").hide();

                if(isShowNothing){
                    $(".rs_not").show();
                }else{
                    $(".rs_not").hide();
                }
            }else{
                $.each( $obj.find("ul").find("li"), function( key, value ) {
                    _this.chgSearchText($(value), "", true);
                });
                $("span.op_desc_txt").hide();
                $(".rs_not").hide();
            }
        }
	};

	CustomOption.prototype.chgSearchText = function ($obj, text, isOriginal) {

		var $title = $obj.find("strong.title");
		var titleText = "";
		if(isOriginal || "" == text){
			titleText = $obj.find("a").data("dtloptnm").toString();
			$title.html(titleText);
		}else{
			titleText = $obj.find("a").data("dtloptnm").toString().split(text).join("<em>"+text+"</em>");
			$title.html(titleText);
		}
		$obj.show();
	};

	CustomOption.prototype.optSearch = function ($obj, text) {
		var _this = this;
        var isShowNothing = true;
		if(_this.isOptSearchFlag){

			$.each( $obj.find("ul").find("li"), function( key, value ) {
				var dtlOptNm = $(value).find("a").data("dtloptnm").toString().toUpperCase();

				if(trim(text) == '' || dtlOptNm.indexOf(text.toUpperCase()) > -1){
					if(_this.isSoldOutFlag){
						if(0 == $(value).find("a").data("stckqty")){
							$(value).hide();
						}else{
							_this.chgSearchText($(value), text, false);
							isShowNothing = false;
						}
					}else{
						_this.chgSearchText($(value), text, false);
						isShowNothing = false;
					}
				}else{
					$(value).hide();
				}
			});

            if(isShowNothing){
                $(".rs_not").show();
            }else{
                $(".rs_not").hide();
            }
		}else{

            _this.soldOut($obj);
		}
	};
	
	CustomOption.prototype.getTransOptionData = function(jsonObj, optLvl) {
		var _this = this;
		var size = jsonObj.infoList.length;
		for(var i=0;i<size;i++){
			jsonObj.infoList[i] = _this.getOptionLiData(jsonObj.infoList[i], optLvl);
		}
		return jsonObj;
	};
	
	CustomOption.prototype.getOptionLiData = function(obj, optLvl) {
		var _this = this;
		obj.optNo = _this.paramData.optNo + "," + obj.optNo;
		obj.selOptIdx = Number(optLvl);

		obj.dtlOptNm = obj.dtlOptNm.replace(/^@#@\[/g, "[");
		
		if( obj.rntlCst!=null && obj.rntlCst > 0  ){
			obj.price = _this.commaFormat(Number(obj.rntlCst)) +"원";
		}
		else {
			if((Number(obj.minAddPrc) == 0 && Number(obj.maxAddPrc) == 0) || Number(obj.minAddPrc) == Number(obj.maxAddPrc)) {
				obj.price = _this.commaFormat(Number(prcVar.dscPrc) + Number(obj.minAddPrc)) + "원";
			} else if(obj.stckNo > 0){
				obj.price = _this.commaFormat(Number(prcVar.dscPrc) + Number(obj.minAddPrc)) + "원";
			} else {
				obj.price = _this.commaFormat(Number(prcVar.dscPrc) + Number(obj.minAddPrc)) +" ~ " + _this.commaFormat(Number(prcVar.dscPrc) + Number(obj.maxAddPrc)) + "원";
			}
		}
				
		return obj;
	};

	CustomOption.prototype.setSelOptRecord = function($this){
		var _this = this
			,optData = _this.extractData($this)
			,selOptArrSize = _this.selOptArr.length;

		var selOptRecord = new SelOptRecord({
			"optNm" : optData.dtloptnm
			,"optItemNo" : optData.optitemno
			,"optValueNo" : optData.optvalueno
			,"addPrc" : optData.addprc
			,"stckQty" : optData.stckqty
			,"selOptIdx" : optData.seloptidx
		});

		if(selOptArrSize > 0){
			var index = _this.chkArrIndexOf(selOptArrSize, selOptRecord.optItemNo);

			if(index > -1){
				_this.editSelOptArr(selOptRecord, index);
                _this.selOptArr.splice(index+1, 1);
			}else{
				_this.addSelOptArr(selOptRecord);
			}
		}else{
			_this.addSelOptArr(selOptRecord);
		}
	};

	CustomOption.prototype.addSelOptArr = function(selOptRecord){
		var _this = this;
		_this.selOptArr.push(selOptRecord);

		// 아이템 번호로 정렬
		_this.selOptArr.sort(function(i1, i2) {
			return i1.selOptIdx - i2.selOptIdx;
		});
	};

	CustomOption.prototype.editSelOptArr = function(selOptRecord, index){
		var _this = this;
		_this.selOptArr[index].optNm = selOptRecord.optNm;
		_this.selOptArr[index].optItemNo = selOptRecord.optItemNo;
		_this.selOptArr[index].optValueNo = selOptRecord.optValueNo;
		_this.selOptArr[index].addPrc = selOptRecord.addPrc;
		_this.selOptArr[index].stckQty = selOptRecord.stckQty;
	};


	CustomOption.prototype.chkArrIndexOf = function(size, optItemNo) {
		var _this = this;
		for ( var i = 0; i < size; i++) {
			if (_this.selOptArr[i].optItemNo == optItemNo) {
				return i;
			}
		}
		return -1;
	};

	CustomOption.prototype.getCurrentOptMixNo = function(separator) {
		var currentOptMixNo = "";
        if(optVar.selOptCnt > 0){
            for(var i = 0; i < optVar.selOptCnt; i++){
                currentOptMixNo = currentOptMixNo + this.selOptArr[i].optItemNo
                    + ":" + this.selOptArr[i].optValueNo + separator;
            }
            var lastIndex = currentOptMixNo.lastIndexOf(separator);
            currentOptMixNo = currentOptMixNo.substring(0, lastIndex);
        }else{
            currentOptMixNo = "nonSelOpt";
        }

		return currentOptMixNo;
	};

	CustomOption.prototype.getCurrentOptMixNm = function(separator, clsf) {
		var currentOptMixNm = "";
		if("ALL" == clsf || "ENT" == clsf){
			for(var i = 0; i < optVar.entOptCnt; i++){
				currentOptMixNm = currentOptMixNm + this.entOptArr[i].optTxt + separator;
			}
		}
		if("ALL" == clsf || "SEL" == clsf) {
			for (var i = 0; i < optVar.selOptCnt; i++) {
				currentOptMixNm = currentOptMixNm + this.selOptArr[i].optNm + separator;
			}
		}
		var lastIndex = currentOptMixNm.lastIndexOf(separator);
		currentOptMixNm = currentOptMixNm.substring(0, lastIndex);
		return currentOptMixNm;
	};

	CustomOption.prototype.chkOptStock = function() {
		var _this = this;
		var url = "/product/SellerProductDetailAjax.tmall";
		var mixOptNo = _this.getCurrentOptMixNo(",");
		var mixOptNm = _this.getCurrentOptMixNm(",", "SEL");

		var param = "method=getStockInfoByOptNos&prdNo=" + optVar.prdNo
			+ "&mixOptNo=" + mixOptNo + "&selOptCnt=" + optVar.selOptCnt
			+ "&selOptTyp=" + optVar.selOptTyp
			+ "&optNmList=" + escape(encodeURIComponent(optVar.optItemNms))
			+ "&mixOptNm=" + escape(encodeURIComponent(mixOptNm));

		optVar.optCheckStatus = "CHECK";

		var callback = function(returnVal){
			optVar.optCheckStatus = "OK";
			if (returnVal == "FAIL") {
				alert("옵션을 불러오는 과정에서 일시적인 오류가 발생했습니다. 새로고침하신 후 이용해주세요!");
				return;
			}
			var jsonObj = eval(returnVal);

			if( jsonObj == null || jsonObj[0] == null ) {
				alert("옵션정보가 변경되어 선택 불가합니다. 새로고침하신 후 이용해주세요!");
				return;
			}

			_this.addOrderOptArr(jsonObj);
		};

		$.ajax({
			url : url,
			data : param,
			success : callback
		});
	};

	CustomOption.prototype.chkDuplicateStckNo = function(prdStckNo){
		for(var i=0,size=optVar.orderOptArr.length;i<size;i++){
			if(optVar.orderOptArr[i].prdStckNo == prdStckNo){
				alert("이미 선택되어 있는 옵션입니다.");
				return true;
			}
		}
		return false;
	};

	CustomOption.prototype.addOrderOptArr = function(data) {
		var _this = this;
        if(_this.chkDuplicateStckNo(data[0].prdStckNo)){
            return false;
        }

		var orderOpt = {};
		orderOpt.selOptArr = _this.selOptArr;
		orderOpt.entOptArr = _this.entOptArr;
		orderOpt.calcOptObj = _this.calcOptObj;
		orderOpt.optMixNo = _this.getCurrentOptMixNo(",");
		orderOpt.prdStckNo = data[0].prdStckNo;
		orderOpt.amount = optVar.defaultOptQty || 1;
		orderOpt.addPrc = data[0].addPrc;
		orderOpt.price = Number(prcVar.dscPrc) + Number(data[0].addPrc);
		orderOpt.stckQty = data[0].stckQty;
		orderOpt.sumDscPrc = 0;
		orderOpt.choiceCupnIssNo = 0;
		orderOpt.bonusCupnIssNo = 0;
		orderOpt.plusDscAmt = 0;
		orderOpt.rntlCst = data[0].rntlCst;
		orderOpt.rntlSavePoint =  Math.floor( data[0].rntlCst * prcVar.prdRltnSavingRate / 100 ) ;
		
		_this.pushOrderOptArr(orderOpt);

		_this.addOrderOptArea(orderOpt);
	};

	CustomOption.prototype.addOrderOptArea = function(data) {
		var _this = this;
		var selOptData = $.extend({}, {"target": "ui_optSelWrapper"}, _this.getTransSetItemData(data));

		// 상품 추가는 product.setItem.js 모듈에서 관리한다. -> 추후 다른 부분에서도 상품 선택시 사용 가능하다.
		_this.$win.trigger('setItem', selOptData);
		//선택한 옵션 추가후 기본적인 작업을 진행
        _this.$input.val("");
		// _this.$estimate.find("p.txt_write > input").val("");
		// _this.$estimate.find("p.txt_write02 > input").val("0원");

		$("[name=selOptMergeNm]").each(function(){
			$(this).text("");
		});
		_this.selOptArr = [];
		_this.viewOption(false, true);
	};

	CustomOption.prototype.getTransSetItemData = function(data){
		var _this = this;
		data.idxMixNo = data.optMixNo;
		data.dispNm = _this.getCurrentOptMixNm(" / ", "ALL") + _this.getCalcOptNm(_this.calcOptObj);
		data.priceTxt = _this.commaFormat(data.price);
		if( data.rntlSavePoint > 0 ) data.saveRntlPointStr = "(적립예상 포인트 "+_this.commaFormat( data.rntlSavePoint )+"P)";
		else data.saveRntlPointStr = "";
		 
		return data;
	};


	CustomOption.prototype.pushOrderOptArr = function(data){

		optVar.orderOptArr.push(data);
	};

	CustomOption.prototype.initNonOptOrderInfo = function(){
		var _this = this;

		_this.pushOrderOptArr({
			"selOptArr" : _this.selOptArr,
			"entOptArr" : _this.entOptArr,
			"calcOptObj" : _this.calcOptObj,
			"optMixNo" : "nonSelOpt",
			"prdStckNo" : optVar.totPrdStckNo,
			"amount" : optVar.defaultOptQty  || 1,
			"addPrc" : optVar.totPrdPrc,
			"price" : Number(prcVar.dscPrc) + Number(optVar.totPrdPrc),
			"stckQty" : optVar.totStockQty,
			"sumDscPrc" : 0,
			"choiceCupnIssNo" : 0,
			"bonusCupnIssNo" : 0,
			"plusDscAmt" : 0,
			"rntlCst":0
		});

		_this.$win.trigger('setItem', false);
		_this.viewOption(false, true);
	};

	CustomOption.prototype.setEntOptRecord = function ($obj) {
		var entOptRecord = new EntOptRecord({
			"optNo" : $obj.data("optentno"),
			"optNm" : $obj.data("optentnm"),
			"optTxt" : $obj.val()
		});

		this.entOptArr.push(entOptRecord);
	};

	CustomOption.prototype.chkDuplicateSelOption = function(optMixNo){
		for(var i=0,size=optVar.orderOptArr.length;i<size;i++){
			if(optVar.orderOptArr[i].optMixNo == optMixNo){
				alert("이미 선택되어 있는 옵션입니다.");
				return true;
			}
		}
		return false;
	};

	CustomOption.prototype.commaFormat = function (num) {
		if (num === 0) {
			return 0;
		}
		var reg = /(^[+-]?\d+)(\d{3})/,
			n = (num + '');

		while (reg.test(n)) {
			n = n.replace(reg, '$1' + ',' + '$2');
		}
		return n;
	};

	CustomOption.prototype.afterBind = function(){

		$.each(this.$estimate.find('input.size_value'), function () {
			$(this).attr("readonly", false);
		});

		$.each(this.$estimate.find('[name=calcOptAddPrc]'), function (){
			$(this).val("0원");
		});

	};
	// 사이즈 입력 폼 validation
	CustomOption.prototype.checkCalcOption = function(isAlert){
		var _this = this;
		// 조합형 옵션 선택 상태
		if(!_this.getIsLastOptSelected()){
			if(isAlert){
				alert("옵션 선택 후 추가해주세요.");
				return false;
			}
		}

		var $calcOptX = _this.$estimate.find("[name=calcOptX]");
		var $calcOptY = _this.$estimate.find("[name=calcOptY]");

		var calcOptX = Number($calcOptX.val());
		var calcOptY = Number($calcOptY.val());

		if( $calcOptX.val() == null || $calcOptX.val().length == 0 ){
			if(isAlert){
				alert("사이즈 값을 입력해주세요.");
				$calcOptX.focus();
                $calcOptX.val("");
			}
			return false;
		}
		if( $calcOptY.val() == null || $calcOptY.val().length == 0 ){
			if(isAlert){
				alert("사이즈 값을 입력해주세요.");
				$calcOptY.focus();
                $calcOptY.val("");
			}
			return false;
		}

		// 옵션 최대/최소값
		if(calcOptInfo[0].optItemMinValue > calcOptX
		|| calcOptX > calcOptInfo[0].optItemMaxValue ){
			if(isAlert){
				alert(calcOptInfo[0].optItemMinValue+"에서 "+calcOptInfo[0].optItemMaxValue+"까지 입력 가능합니다.");
				$calcOptX.focus();
			}
			return false;
		}

		if(calcOptInfo[1].optItemMinValue > calcOptY
		|| calcOptY > calcOptInfo[1].optItemMaxValue ){
			if(isAlert){
				alert(calcOptInfo[1].optItemMinValue+"에서 "+calcOptInfo[1].optItemMaxValue+"까지 입력 가능합니다.");
				$calcOptY.focus();
			}
			return false;
		}

		if(calcOptX % calcOptInfo[0].optSelUnit != 0){
			if(isAlert){
				alert(calcOptInfo[0].optSelUnit+"의 배수만 입력 가능합니다.");
				$calcOptX.focus();
			}
			return false;
		}

		if(calcOptY % calcOptInfo[1].optSelUnit != 0){
			if(isAlert){
				alert(calcOptInfo[1].optSelUnit+"의 배수만 입력 가능합니다.");
				$calcOptY.focus();
			}
			return false;
		}

		var addPrc =  calcOptX * calcOptY * calcOptInfo[0].optUnitPrc
			- calcOptInfo[0].optItemMinValue * calcOptInfo[1].optItemMinValue * calcOptInfo[0].optUnitPrc ;
		if(addPrc > 0){
			addPrc = Math.round(addPrc/10)*10;
		}

		_this.$estimate.find("[name=calcOptAddPrc]").val( _this.commaFormat(addPrc)+"원" );

		return true;
	};

	CustomOption.prototype.setClacOptRecord = function () {
		var _this = this;

		var calcOptX = Number(_this.$estimate.find("[name=calcOptX]").val());
		var calcOptY = Number(_this.$estimate.find("[name=calcOptY]").val());

		var calcOptRecord = new CalcOptRecord({
			"optX" : calcOptX,
			"optY" : calcOptY,
			"addPrc" : _this.$estimate.find("[name=calcOptAddPrc]").val().replace(/[^0-9]/g,''),
			"optionSize" : [
				calcOptX,
				calcOptY
			]
		});

		this.calcOptObj = calcOptRecord;
	};

	CustomOption.prototype.setCalenderData = function(){
	    var $obj = this.$templateContent.find('ul > li > a');

        this.calenderArr = this.extractData($obj);
        this.displayCalenderData();
    };

    CustomOption.prototype.displayCalenderData = function(year, month){

        if( year != null && month != null ) {
            this.selectedYear = year;
            this.selectedMonth = month;
        }

        // 년,월 표시
        var selectMonth = this.selectedMonth;
        if( selectMonth < 10 ) {
            selectMonth = "0" + selectMonth;
        }

        $("[name=emYearMonth]").html(this.selectedYear + "." + selectMonth);

        $("tbody[name=tbodyCalenderData]").html("");

        // 해당 년,월의 마지막 일 구하기
        var lastDay = new Date(this.selectedYear, this.selectedMonth, 0).getDate();

        // 해당 년,월의 요일 구하기
        var dayWeek = new Date(this.selectedYear, this.selectedMonth - 1, 1).getDay();

        var i = 0;
        var addHtml = "";
        var addRow = 0;

        // 일요일이 아닐 경우 앞의 영역을 빈칸으로 채운다.
        if( dayWeek != 0 ) {
            addHtml = "<tr>";
            addRow++;
            for(; i < dayWeek ; i++) {
                addHtml += "<td></td>";
            }
        }
        // var selectDate = this.selectedYear + selectMonth;
        var tempDate = "";
        var tempFormatDate = "";
        var tempValue = null;

        // 1일 부터 마지막 일까지 채운다.
        for(var j = 1 ; j <= lastDay ; j++) {
            if( i == 0 ) {
                addHtml += "<tr>";
                addRow++;
            }

            tempFormatDate = this.selectedYear + "-" + selectMonth + "-" + (j < 10 ? "0" + j : j + "");
            tempDate = tempFormatDate.replace(/-/g,"");

            // 현재 일자가 선택 가능한 날짜인지 체크 한다.
            tempValue = this.chkSelectDate(tempFormatDate);

            if( tempValue != null ) {
                // 선택 가능한 일자일 경우 오늘보다 이전인지 체크 한다.
                if( parseInt(optVar.currentDate, 10) > parseInt(tempDate, 10) || (tempValue.stckqty < 1) ) {
                    addHtml += "<td class='end'><a href='#' onclick='return false;'>" + j + "</a></td>";
                } else {
                    addHtml += "<td class='sale'><a href='#' " +
                        "data-optitemno='"+tempValue.optitemno+"' " +
                        "data-optValueno='"+tempValue.optvalueno+"' " +
                        "data-optno='"+tempValue.optno+"'>" + j + "</a></td>";
                }
            } else {
                addHtml += "<td class='no_sale'><a href='#' onclick='return false;'>" + j + "</a></td>";
            }

            i++;
            if( i % 7 == 0 ) {
                i = 0;
                addHtml += "</tr>";
            }
        }

        // 마지막날짜까지 채워지지 않았다면 나머지 일수에 대해 빈칸으로 채운다.
        if( i != 0 ) {
            for(; i < 7 ; i++) {
                addHtml += "<td></td>";
            }
            addHtml += "</tr>";
        }
        $("tbody[name=tbodyCalenderData]").html(addHtml);

    };

    CustomOption.prototype.moveCalenderMonth = function(clsf){
        var month = new Date(this.selectedYear, this.selectedMonth - 1, 1);
        if("prev" == clsf){
            month.setMonth(month.getMonth()-1);
        }else if("next" == clsf){
            month.setMonth(month.getMonth()+1);
        }
        this.displayCalenderData(month.getFullYear(), month.getMonth()+1);
    };

    CustomOption.prototype.chkSelectDate = function(date){
        for(var i=0,size=this.calenderArr.length;i<size;i++){
            if(this.calenderArr[i].dtloptnm == date){
                return this.calenderArr[i]
            }
        }
        return;
    };

    CustomOption.prototype.getCalcOptNm = function(obj){

        if( typeof obj != "object") return "";
        var optionSize = (obj).optionSize;
		// if(!Array.isArray(optionSize)) return "";
        if(typeof optionSize != "object") return "";

        return " , " + calcOptInfo[0].optItemNm + " "+ optionSize[0] + calcOptInfo[0].optUnitNm+" x "+ calcOptInfo[1].optItemNm + " "+ optionSize[1] + calcOptInfo[0].optUnitNm;
    };

    CustomOption.prototype.setCtlgMatchInfo = function(){
		if("" != productEtcInfo.ctlgNo && "" != productEtcInfo.stockNo){
			if("Y" == productEtcInfo.ctlgMatchYn){
				console.log(productEtcInfo.selectedOpt);
				var valArr = productEtcInfo.selectedOpt.split("∏‡");
				console.log(valArr);
				var optNo = valArr[1] + ":" + valArr[2];
				this.$templateContent.find('ul > li > a[data-optno="'+optNo+'"]').trigger('click');
			}else{
				alert("상품정보가 변경되었습니다.");
			}
		}
	};


	return CustomOption;
}));
