/*
 * Object.assign es5
 */
if (typeof Object.assign !== 'function') {
  (function () {
    Object.assign = function (target) {
      'use strict';
      if (target === undefined || target === null) {
        throw new TypeError('Cannot convert undefined or null to object');
      }
    
      var output = Object(target);
      for (var index = 1; index < arguments.length; index++) {
        var source = arguments[index];
        if (source !== undefined && source !== null) {
          for (var nextKey in source) {
            if (source.hasOwnProperty(nextKey)) {
              output[nextKey] = source[nextKey];
            }
          }
        }
      }
      return output;
    };
  })();
}

/*
 * 插件方法做容错（煜航）
 */
Number.isNaN = Number.isNaN || function(value) {     
  return value !== value;
}

// detect share source
function parseParamToObj(obj) {
  if (!obj) return;

  var str = obj.search;

  if (!str) {
    str = obj.hash;
  }

  var index = str.indexOf('?');
  str = str.substring(index + 1);

  var result = {};
  var paramArray = str.split('&');

  for (var i = 0, len = paramArray.length; i < len; i++) {
    var pair = paramArray[i].split('=');

    if (pair[1] === '') {
      pair.push('');
    }

    result[pair[0]] = pair[1];
  }

  return result;
}

function parseHref(str) {
  if (!str) return;

  var _s = str;
  var newUrl = {hash: ''};

  if (/(https?:)?\/\//.test(_s)) {
    newUrl = new URL(str.replace(/(https?:)?(\/\/)(.+)/ig, location.protocol + '$2$3'));
    if (newUrl.hash) {
      _s = newUrl.origin + newUrl.pathname;
    }
  }

  var u = _s.indexOf('?') !== -1;
  var search = window.location.search;
  if (u && search) {
    _s = _s + '&' + search.replace('?', '') + newUrl.hash;
  } else {
    _s = _s + search + newUrl.hash;
  }
  return _s;
}

var sobj = parseParamToObj(location);

window.addEventListener('load', function() {
  var shareSource = sobj.share_source || sobj.from;
  if (shareSource) {
    try {
      reportMsgObj['shared_' + shareSource] = 1;
      reportObserver.forceCommit();
    } catch (e) {
      return;
    }
  }

  if (sobj.msource) {
    try {
      reportMsgObj['msource_' + sobj.msource] = 1;
      reportObserver.forceCommit();
    } catch (e) {
      return;
    }
  }

  var all = document.querySelectorAll('div a');
  for (var i = 0, len = all.length; i < len; i++ ) {
    if (all[i].href) {
      all[i].href = parseHref(all[i].href);
    }
  }
});
