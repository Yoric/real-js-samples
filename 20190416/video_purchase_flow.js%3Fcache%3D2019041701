// JS for Video purchase flow  (Buying videos)
// Used for all platforms

var VideoPurchaseFlow = function() {
    "use strict";
    var Self = this;

    Self.defaultSettings = {
        showSuccessModal: false,
        showFailureModal: false,
        dismissUrl : '',
        buyVideoButton : '.js-purchaseButton',
        submodal_class : '.videoPurchase_submodal',
        showSignupCaptcha : false,
    };

    Self.init = function (options) {
        Self.params = MG_Utils.extendSimple(Self.defaultSettings, options);
        Self.initModals();
        Self.add_listeners();
    };

    Self.initModals = function () {
        Self.purchaseFlowModal = new MG_Modal({
            closeButton : false,
            closeDocument: false,
            content: document.querySelector('.video_purchase_modals_container'),
            className : 'videoPurchaseFlowModal'
        });
    };

    Self.add_listeners = function(){
        var buyVideoButtonList = document.querySelectorAll(Self.params.buyVideoButton);
        [].forEach.call(buyVideoButtonList, function(buyVideoButton) {
            MG_Utils.addEventHandler(buyVideoButton, 'click', function(e) {
                Self.triggerPurchaseFlow();
            });
        });

        // Automatically open success modal
        if (Self.params.showSuccessModal) {
            Self.purchaseFlowModal.openModal();
            var parentModal = document.querySelector('.modalMTubes.videoPurchaseFlowModal');
            // Activate Purchase Modal
            MG_Utils.addClass(parentModal.querySelector('.pf_success_modal'), 'active_modal');
            MG_Utils.addClass(parentModal, 'redirect_on_close');
            purchaseFlow_Utils.addModalCloseListeners(parentModal, Self.params, Self.purchaseFlowModal);

            ga('send', 'event', 'Success Modal', 'click', 'Click on modal');
        }

        // Automatically open failure modal
        if (Self.params.showFailureModal) {
            Self.purchaseFlowModal.openModal();
            var parentModal = document.querySelector('.modalMTubes.videoPurchaseFlowModal');

            // Activate Purchase Modal
            MG_Utils.addClass(parentModal.querySelector('.pf_failure_modal'), 'active_modal');
            MG_Utils.addClass(parentModal, 'redirect_on_close');
            purchaseFlow_Utils.addModalCloseListeners(parentModal, Self.params, Self.purchaseFlowModal);

            ga('send', 'event', 'Transaction Failed Modal', 'click', 'Modal Shown');

            MG_Utils.addEventHandler(parentModal.querySelector('.pf_failure_modal').querySelector('.js_change_cc'), 'click', function () {
                MG_Utils.ajaxCall({
                    url: Self.params.tryAgainUrl,
                    type: 'POST',
                    success: function (data) {
                        if(!data.error || data.success == 'PASS') {
                            window.location.href = data.redirectUrl;
                        }
                    }
                });
            })
        }
    };

    Self.triggerPurchaseFlow = function () {
        Self.purchaseFlowModal.openModal(function () {
            var parentModal = document.querySelector('.modalMTubes.videoPurchaseFlowModal');

            if (Self.params.last4) {
                purchaseFlow_Utils.openSelectedModal('.js-purchaseDigitsModal', parentModal);
                Self.addPurchaseDigitsModalListeners(parentModal);

            } else {
                purchaseFlow_Utils.openSelectedModal('.js-purchaseModal', parentModal);
            }

            // Buy button on modals
            if(parentModal.querySelector('.js-purchaseVideoButton')) {
                var downloadPaidButton = parentModal.querySelectorAll('.js-purchaseVideoButton');

                [].forEach.call(downloadPaidButton, function(el){
                    MG_Utils.addEventHandler(el, 'click', function(e) {
                        el.setAttribute('disabled', true);
                        if (Self.params.liu) {
                            Self.digitsValidation(parentModal, e, el);
                        } else {
                            // Open Login Signup Modal
                            purchaseFlow_Utils.openSelectedModal('.login_signup_modal', parentModal);
                            purchaseFlow_LoginSignup.addListeners(parentModal, Self.params.showSignupCaptcha);
                        }
                    });
                });
            }

            // Different credit card
            if(parentModal.querySelector('.js-purchaseCreditCard')) {
                var downloadPaidButton = parentModal.querySelectorAll('.js-purchaseCreditCard');

                [].forEach.call(downloadPaidButton, function(el){
                    MG_Utils.addEventHandler(el, 'click', function(e) {
                        el.setAttribute('disabled', true);
                        Self.probillerAjax(parentModal, Self.params.probillerCreditCard, el);
                    });
                });
            }


            // Listeners for closing the modals
            purchaseFlow_Utils.addModalCloseListeners(parentModal, Self.params, Self.purchaseFlowModal);
            // Listeners for the Leave Confirmation Modal
            purchaseFlow_Utils.addLeaveModalListeners(parentModal, Self.params, Self.purchaseFlowModal);
        });
    };

    Self.addPurchaseDigitsModalListeners = function (parentModal) {
        var selectDigits = parentModal.querySelector(".js_videoPurchaseDigits");

        if(selectDigits) {
            selectDigits.addEventListener("input", limitInputDigits, false);
        }

        function limitInputDigits(e) {
            if (e.target !== e.currentTarget) {
                var max_chars = 1;

                if(!Number.isInteger(parseFloat(e.target.value))) {
                    e.target.value = '';
                    MG_Utils.removeClass(e.target, 'full');
                } else if(e.target.value.length > max_chars) {
                    e.target.value = e.target.value.replace(e.target.value.charAt(1), '');
                } else {
                    if(e.target.value != '') {
                        MG_Utils.addClass(e.target, 'full');
                        MG_Utils.nextElementSibling(e.target).focus();
                    }
                }
            }

            e.stopPropagation();
        }

        Number.isInteger = Number.isInteger || function(value) {
            return typeof value === 'number' &&
                isFinite(value) &&
                Math.floor(value) === value;
        };
    };


    Self.probillerAjax = function (parentModal, ajaxUrl, trigger, array) {
        var errorField  = parentModal.querySelector('.js-digitsError');

        MG_Utils.ajaxCall({
            url: ajaxUrl,
            type: 'POST',
            data: array,
            success: function (data) {
                if(data.error) {
                    errorField.innerHTML = data.message;
                } else {
                    errorField.innerHTML = '';
                    mixpanel.identify(data.MixpanelEvent.userId);
                    mixpanel.track(data.MixpanelEvent.eventName, data.MixpanelEvent.event);

                    window.location.href = data.redirectUrl;
                }

                trigger.removeAttribute('disabled');
            }
        });

    };


    Self.digitsValidation = function (parentModal, e, trigger) {
        e.preventDefault();

        var digitsWrapper = parentModal.querySelector('.js-purchaseDigitsModal');

        if(MG_Utils.hasClass(trigger, 'js-purchaseVideoDigitsButton')){
            var inputs     = digitsWrapper.querySelectorAll('input'),
                digitArray = [];

            [].forEach.call(inputs, function(element){
                if(element.value == '') {
                    digitArray = [];
                    MG_Utils.addClass(element, 'fail');
                } else {
                    MG_Utils.removeClass(element, 'fail');
                    digitArray.push(element.value);
                }
            });

            if(digitsWrapper.querySelectorAll('input.fail').length) {
                digitsWrapper.querySelector('.js-digitsError').innerHTML = Self.params.digitsError;
                trigger.removeAttribute('disabled');
            } else {
                var digits = {'last4' : digitArray.join('')};
                Self.probillerAjax(digitsWrapper, Self.params.probillerUrl, trigger, digits);
            }
        } else {
            Self.probillerAjax(parentModal, Self.params.probillerUrl, trigger);
        }

    };

    Self.handleAfterLoginSignup = function (parentModal, data, last4Required) {
        last4Required = (typeof last4Required != "undefined") ? last4Required : false;

        // If Liu is Model then refresh the page
        if (typeof data.liuIsOwner !== 'undefined' && data.liuIsOwner) {
            window.location.reload(true);
        } else {
            if (typeof data.newToken !== 'undefined' && data.newToken) {
                Self.params.token = data.newToken;
            }
            // Open confirmation modal
            if (last4Required) {
                purchaseFlow_Utils.openSelectedModal('.last_digits_modal', parentModal);
                Self.addLastDigitsModalListeners(parentModal);
                // Add user avatar + username
                parentModal.querySelector('.last_digits_top_username').innerHTML = data.username;
                parentModal.querySelector('.last_digits_avatar').setAttribute('src' , data.avatar);

                // Adds specific class so that leave confirmation modal can be triggered when trying to exit flow after this point
                MG_Utils.addClass(parentModal, 'leave_confirmation');
                // Making sure if they ever leave the purchase flow, the page will reload
                MG_Utils.addClass(parentModal.querySelector('.js_confirm_leave_modal'), 'reload_on_close');

                // Handling dismiss urls if logged in user is a premium user
                if (typeof data.dismissUrl != 'undefined') {
                    Self.params.dismissUrl = data.dismissUrl;
                }
                // For premium users
                if (typeof data.al != 'undefined') {
                    Self.params.premiumUserInfo = data.al;
                }
            } else if (typeof data.alreadyBought !== 'undefined' && data.alreadyBought) {
                // If the logged in user has already bought this video then send them the Already Bought Modal

                purchaseFlow_Utils.openSelectedModal('.js-alreadyBoughtModal', parentModal);

                // To allow closing the modal and refresh on closing modal
                MG_Utils.removeClass(parentModal, 'leave_confirmation');
                MG_Utils.addClass(parentModal, 'reload_on_close');

                // Handling dismiss urls if logged in user is a premium user
                if (typeof data.dismissUrl != 'undefined') {
                    Self.params.dismissUrl = data.dismissUrl;
                }

                // Set Send a Tip Url
                if (typeof data.profileUrl != "undefined") {
                    parentModal.querySelector('.js_alreadyBought').setAttribute('data-url', data.profileUrl);
                }

                // Click event for the Send a Tip Button
                MG_Utils.addEventHandler(parentModal.querySelector('.js_alreadyBought'), 'click', function (e) {
                    Self.purchaseFlowModal.closeModal(function () {
                        window.location.href = e.target.getAttribute('data-url');
                    });
                });

            } else {
                if (typeof data.redirectUrl != 'undefined') {
                    window.location.href = data.redirectUrl;
                }
            }

        }
    };

    Self.addLastDigitsModalListeners = function (parentModal) {
        // last digit input listeners

        var lastDigitInputList = parentModal.querySelectorAll('.lastFour');
        [].forEach.call(lastDigitInputList, function(lastDigitInput) {

            ['keyup', 'input', 'keypress'].forEach(function (eventType) {
                MG_Utils.addEventHandler(lastDigitInput, eventType, function (e) {
                    // Auto jumps to the next input if the user has type an input
                    // Only allows one digit in each input box
                    if ((eventType == 'input') && e.target.value.length >= 1) {
                        e.target.value = e.target.value.slice(0, 1);
                        if (!MG_Utils.hasClass(e.target, 'lastFourEnd')) {
                            e.target.nextElementSibling.focus();
                        }
                    }
                    var lastDigitDiv = parentModal.querySelector('.'+purchaseFlow_Utils.getCurrentOpenedModal(parentModal));
                    var last4 = '';
                    [].forEach.call(lastDigitDiv.querySelectorAll('.lastFour'), function (input) {
                        last4 += input.value;
                    });
                    if ((eventType == 'input') && last4.length == 4) { // Enabling the submit button if there's 4 digits
                        MG_Utils.removeClass(lastDigitDiv.querySelector('.js_last_digits_submit'), 'disabled');
                    }
                    // Allows submitting the form with Enter Key if conditions are met
                    if ((eventType == 'keyup') && (e.keyCode == '13') && !MG_Utils.hasClass(lastDigitDiv.querySelector('.js_last_digits_submit'), 'disabled')) {
                        Self.handleLastDigitsAjax(lastDigitDiv, last4);
                    }

                });
            });
        });
        // last digit submit listeners
        var lastDigitSubmitList = parentModal.querySelectorAll('.js_last_digits_submit');
        [].forEach.call(lastDigitSubmitList, function(submitButton) {
            MG_Utils.addEventHandler(submitButton, 'click', function(e) {
                // Submits the form on click if the button is not disabled
                if (!MG_Utils.hasClass(submitButton, 'disabled')) {
                    var lastDigitDiv = e.target.parentElement;
                    var last4 = '';
                    lastDigitDiv.querySelectorAll('.lastFour').forEach(function (input) {
                        last4 += input.value
                    });
                    var lastDigitElm = parentModal.querySelector('.'+purchaseFlow_Utils.getCurrentOpenedModal(parentModal));
                    Self.handleLastDigitsAjax(lastDigitElm, last4);
                }
            });
        });

        var changeCCList = parentModal.querySelectorAll('.js_change_cc');
        [].forEach.call(changeCCList, function(changeCCButton) {
            MG_Utils.addEventHandler(changeCCButton, 'click', function(e) {
                MG_Utils.ajaxCall({
                    type: 'POST',
                    data: {
                        token: Self.params.token
                    },
                    url: Self.params.probillerCreditCard,
                    success: function(resp) {
                        if (resp.success == 'PASS') {
                            window.location.href = resp.redirectUrl;
                        }
                    }
                });
            });
        });

    };

    Self.handleLastDigitsAjax = function (lastDigitDiv, last4) {
        // Reset error states
        MG_Utils.removeClass(lastDigitDiv.querySelector('.last_digits_error'), 'active');
        lastDigitDiv.querySelector('.last_digits_error').innerHTML = '';

        var last4Data = {
            last4 : last4,
            token : Self.params.token
        };
        if (Self.params.premiumUserInfo) {
            last4Data.al = Self.params.premiumUserInfo;
        }

        MG_Utils.ajaxCall({
            type: 'POST',
            data: last4Data,
            url: Self.params.probillerUrl,
            success: function(data) {
                if (data.success == 'FAIL' || data.error) {
                    // Show error message
                    MG_Utils.addClass(lastDigitDiv.querySelector('.last_digits_error'), 'active');
                    lastDigitDiv.querySelector('.last_digits_error').innerHTML = data.message;
                } else {
                    // go to probiller
                    window.location.href = data.redirectUrl;
                }
            }
        });
    };



};

try{
    var videoPurchaseFlow = new VideoPurchaseFlow();
    videoPurchaseFlow.init(typeof Video_PurchaseFlow_Params !== 'undefined' ? Video_PurchaseFlow_Params : {});

}catch(e){
    console.log("ERROR === Video Purchase Flow ===");
    console.log(e);
}
